#ifndef ActKinBalancerService_idl
#define ActKinBalancerService_idl

#include "BasicDataType.idl"

#include "ExtendedDataTypes.idl"
#include "actkin_balancer_msgs/idl/ActKinBalancer.idl"

module actkin_balancer
{
  interface ActKinBalancerService
  {
    struct Region3D {
      sequence<sequence<double, 3> > C;
      sequence<double> ld;
      sequence<double> ud;
    };

    struct NominalEEIdl {
      string name;
      string link; // URDF link name
      RTC::Pose3D localPose; // link local frame
      string frameId; // URDF link name. ""ならworld
      RTC::Pose3D framePose; // frameId local
      double time;
      RTC::Pose3D pose;
      sequence<boolean, 6> freeAxis; // Reference pose local. 拘束する軸のみtrue
      long priority; // 分解加速度制御の優先度. 0 or 1. 0なら普通. 1は重心と同じ. default 1.
    };

    struct NominalIdl {
      double nominalqTime;
      sequence<double> nominalq; // 要素数と順番はrobot->numJointsと同じ
      sequence<NominalEEIdl> nominalEE;
      double nominalZ; // foot origin local. cog Z
    };

    struct ActKinBalancerParam
    {
      // 能動的接触可能点. 右足の情報のみを与えて、自動的にY反転する.
      string rlegLink; // URDF link name.
      string llegLink; // URDF link name.

      NominalIdl nominal;

      // for rleg parameter
      RTC::Pose3D localPose; // link local
      sequence<double, 2> hull; /// localPose frame. 単位[m]. 干渉計算に使用される. また、この値を用いて出力のregionやwrenchCが生成される.
      sequence<double, 2> safeHull; /// localPose frame. 単位[m]. COPの存在可能領域. eeHull以下にすること

    };

    boolean startBalancer();
    boolean stopBalancer();

    boolean setActKinBalancerParam(in ActKinBalancerParam i_param);
    boolean getActKinBalancerParam(out ActKinBalancerParam i_param);

    boolean setRefState(in actkin_balancer_msgs::RefStateIdl i_param);
  };
};

#endif
