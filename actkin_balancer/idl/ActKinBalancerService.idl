#ifndef ActKinBalancerService_idl
#define ActKinBalancerService_idl

#include "BasicDataType.idl"

#include "ExtendedDataTypes.idl"
#include "actkin_balancer_msgs/idl/ActKinBalancer.idl"

module actkin_balancer
{
  interface ActKinBalancerService
  {
    struct Region3D {
      sequence<sequence<double, 3> > C;
      sequence<double> ld;
      sequence<double> ud;
    };

    struct ActKinBalancerParam
    {
      // 能動的接触可能点. 右足の情報のみを与えて、自動的にY反転する.
      string rlegLink; // URDF link name.
      string llegLink; // URDF link name.
      RTC::Pose3D eeLocalPose; // link local
      sequence<sequence<double, 2> > eeHull; /// localPose frame. 単位[m]. 干渉計算に使用される. また、この値を用いて出力のregionやwrenchCが生成される.
      sequence<sequence<double, 2> > eeSafeHull; /// localPose frame. 単位[m]. COPの存在可能領域. eeHull以下にすること

      sequence<double> nominalq; // 要素数と順番はrobot->numJointsと同じ
      RTC::Orientation3D niminalRoot; // foot origin local.
      double nominalZ; // foot origin local. cog Z

      double mu_trans;
      double mu_rot;
      double region_margin;
      double default_translate_pos; // 右脚と左脚の中心からの右脚の相対位置.(Y[m]). 0以下.
      double leg_collision_margin; /// [m]. 左右の足のlegHullがこの距離以上離れるようにする. 0以上.

      double default_step_time; /// [s]. goPosやgoVelocityのときに自動生成されるfootstepの一歩の時間. 下限0.01[s]
      double default_stride_limitation_max_theta; // leg frame. [rad]. goPosやgoVelocityのときに自動生成されるfootstepの上限. 左足相対の右足. default 15,45[deg]. 0以上. 足裏同士の干渉は自動で回避できるが、膝同士の干渉はIK以外では回避できないので、内股方向には小さくすること.
      double default_stride_limitation_min_theta; /// leg frame. [rad]. goPosやgoVelocityのときに自動生成されるfootstepの下限. 左足相対の右足. default 15,45[deg]. 0以下. 足裏同士の干渉は自動で回避できるが、膝同士の干渉はIK以外では回避できないので、内股方向には小さくすること.
      sequence<double, 2> default_stride_limitation; /// rleg用. 単位[m]. goPosやgoVelocityのときに自動生成されるfootstepの、遊脚のエンドエフェクタの着地位置の範囲の凸包. 反対の脚のEndEffector frame(Z軸は鉛直)で表現した着地可能領域(自己干渉やIKの考慮が含まれる). thetaの影響はlegHullとlegCollisionMarginを用いて別で評価されるので、defaultStrideLimitationHullでは考慮しなくて良い
      double default_double_support_ratio; /// defaultStepTimeのうちの、両足支持期の時間の割合. 下限0.01. 上限0.99
      double default_step_height; /// goPosやgoVelocityのときに自動生成されるfootstepの足上げ高さ[m]. 0以上

      double stride_limitation_max_theta; // leg frame. [rad]. goPosやgoVelocityのときに自動生成されるfootstepの上限. 左足相対の右足. overwritable 15,45[deg]. 0以上. 足裏同士の干渉は自動で回避できるが、膝同士の干渉はIK以外では回避できないので、内股方向には小さくすること.
      double stride_limitation_min_theta; /// leg frame. [rad]. goPosやgoVelocityのときに自動生成されるfootstepの下限. 左足相対の右足. overwritable 15,45[deg]. 0以下. 足裏同士の干渉は自動で回避できるが、膝同士の干渉はIK以外では回避できないので、内股方向には小さくすること.
      sequence<double, 2> stride_limitation; /// rleg用. 単位[m]. goPosやgoVelocityのときに自動生成されるfootstepの、遊脚のエンドエフェクタの着地位置の範囲の凸包. 反対の脚のEndEffector frame(Z軸は鉛直)で表現した着地可能領域(自己干渉やIKの考慮が含まれる). thetaの影響はlegHullとlegCollisionMarginを用いて別で評価されるので、overwritableStrideLimitationHullでは考慮しなくて良い
      double double_support_ratio; /// overwritableStepTimeのうちの、両足支持期の時間の割合. 下限0.01. 上限0.99
      double max_landing_height; /// [m]. 反対の脚のEndEffector frame(Z軸は鉛直)で表現した着地高さの下限(自己干渉やIKの考慮が含まれる). overwritable_max_landing_height以下.
      double min_landing_height; /// [m/s]. genCoords(のgoal)からdstCoordsまでの高さの差がこの速度を超えないように、remainTimeを長くする. 0より大きい. touchVelと同じくらい?
      /// 単位[s]. swing期は、(remainTime - delayTimeOffset)後にdstCoordsに到達するようなrectangle軌道を生成し、その軌道にdelayTimeOffset遅れで滑らかに追従するような軌道を生成する. 下限0.0
      double swing_trajectory_delay_time_offset;
      /// 単位[m/s]. この速さで足を下ろした場合に着地までに要する時間をremainTimeが下回るまで、足下げを始めない. 下限0.001[m/s]
      double swing_trajectory_touch_vel;
      /// [m]. 遊脚軌道生成時に、次に着地する場合、generate frameで鉛直方向に, 目標着地位置に対して加えるオフセット. 遅づきに対応するためのもの. 位置制御だと着地の衝撃が大きいのでデフォルトを0にしているが、トルク制御時や、高低差がある地形や、衝撃を気にする必要がないシミュレーションでは-0.05等にした方がよい. 上限0.0. 歩行中は変更不可
      double goal_offset;

    };

    boolean startBalancer();
    boolean stopBalancer();

    boolean setActKinBalancerParam(in ActKinBalancerParam i_param);
    boolean getActKinBalancerParam(out ActKinBalancerParam i_param);

    boolean setRefState(in actkin_balancer_msgs::RefStateIdl i_param);
  };
};

#endif
